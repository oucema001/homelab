{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Cluster Application",
  "description": "Definitions used by ansible to generate K8S manifest files",
  "type": "object",
  "patternProperties": {
    "^[a-zA-Z0-9-]+$": {
      "type": "object",
      "description": "Application Name. Used to build application path (cluster/$namespace/$app_name), generating names for secrets, PVCs, etc.",
      "properties": {
        "path": {
          "title": "path",
          "description": "Path to the application directory cluster/, not include the app name itself.\n\nDefaults to value of $namespace in this app.\n\nExample: cluster/db/sql/mysql, path is db/sql",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type":"null"
            }
          ]
        },
        "charts": {
          "title": "charts",
          "type": "array",
          "description": "List of Helm Charts to deploy with this application.",
          "items": {
            "$ref": "#/$defs/HelmChart"
          }
        },
        "namespace": {
          "title": "namespace",
          "type": "string",
          "description": "The namespace to deploy this application to"
        },
        "kustomize": {
          "$ref": "#/$defs/Kustomize"
        },
        "localStorage": {
          "$ref": "#/$defs/LocalStorage"
        },
        "secrets": {
          "$ref": "#/$defs/Secrets"
        },
        "wave": {
          "title": "wave",
          "type": "string"
        },
        "enable": {
          "title": "enable",
          "type": "boolean",
          "description": "Whether or not to actually create this application"
        },
        "ignoreDifferences": {
          "title": "ignoreDifferences",
          "type": "array",
          "items": {
            "$ref": "#/$defs/IgnoreDifferences"
          }
        }
      },
      "additionalProperties": true,
      "required": ["namespace"]
    }
  },
  "$defs": {
    "HelmChart": {
      "$id": "/HelmChart",
      "type": "object",
      "properties": {
        "valueFiles": {
          "title": "valueFiles",
          "type": "array",
          "description": "Array of filenames relative to the application directory to be applied to this chart as values files.\n\nAn empty array signifies no values file is used for this chart.",
          "items": {
            "type": "string"
          },
          "default": ["values.yaml"]
        },
        "skipCrds": {
          "title": "skipCrds",
          "type": "boolean"
        },
        "release": {
          "title": "release",
          "type": "string",
          "description": "Specify a release name to be used instead of the one generated by helm"
        },
        "chart": {
          "title": "chart",
          "type": "string",
          "description": "Chart identifier in $chart_repo/$chart_name format.\n\nThe chart repository must be defined in inventory/group_vars/kubectl/10-app-config.yml",
          "examples": ["bitnami/mysql"]
        },
        "version": {
          "title": "version",
          "type": "string"
        },
        "apiVersions": {
          "title": "apiVersions",
          "type": "boolean",
          "default": false,
          "description": "Include a list of API versions in Kustomization file to pass to Capabilities.APIVersions"
        }
      },
      "additionalProperties": true,
      "required": ["chart"]
    },
    "Secrets": {
      "$id": "/Secrets",
      "type": "object",
      "title": "secrets",
      "description": "Have ansible manage generating secrets for this application. The application task will:\n - Generate any number of secrets defined in the below object\n - Generate a SOPS encrypted k8s Secret Opaque manifest file in the application directory\n - Put a secret-generator.yaml file in the application directory to tell KSOPS to decrypt and load the Secrets into the cluster when ArgoCD picks up the application\n - Add the secret-generator.yaml file as a generator in the Kustomization file",
      "patternProperties": {
        "^[a-zA-Z0-9-]+$": {
          "title": "secret name",
          "description": "Name of a secret to manage. Used to define the metadata name and file name in the format ${app_name}-${secret_name}.\n\nCan be completely overridden with the nameOverride option.",
          "examples": ["secret"],
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "nameOverride": {
                  "type": "string",
                  "title": "nameOverride",
                  "description": "Name the secret this, instead of using the naming convention."
                },
                "type": {
                  "type": "string",
                  "title": "The Kubernetes Secret type to define this object as",
                  "enum": ["basic-auth"]
                },
                "reflect": {
                  "title": "reflect",
                  "description": "Whether to include the kubernetes-reflector annotations for this secret, and a list of namespaces to limit the reflection to. An empty array means all namespaces",
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    { "type": "null" }
                  ]
                },
                "data": {
                  "type": "object",
                  "title": "data",
                  "description": "Fields to go into the \"data\" section of the Secret manifest",
                  "patternProperties": {
                    "^[a-zA-Z0-9-]+$": {
                      "anyOf": [
                        {
                          "title": "generated secret",
                          "description": "Ansible will generate a value for this individual secret",
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "title": "type",
                              "enum": ["password", "key"],
                              "description": "Type of secret to generate"
                            },
                            "name": {
                              "title": "name",
                              "type": "string",
                              "description": "Name of the secret to generate, used by ansible and Secret template",
                              "examples": ["db", "admin"]
                            }
                          }
                        },
                        {
                          "type": "string",
                          "title": "value",
                          "description": "Raw string value to place into this field"
                        }
                      ]
                    }
                  }
                },
                "stringData": {
                  "type": "object",
                  "title": "stringData",
                  "description": "Fields to go into the \"stringData\" section of a Secret",
                  "patternProperties": {
                    "^[a-zA-Z0-9-]+$": {
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "type": "null",
              "description": "There are already sops-encrypted secret file(s) in the application directory. Create the Kustomization file and secret-generator for KSOPS, but don't manage the secret files.",
              "additionalProperties": false
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "Kustomize": {
      "$id": "/Kustomize",
      "title": "kustomize",
      "type": "object",
      "description": "Fields used to build a kustomization.yaml file in the application directory.",
      "properties": {
        "charts": {
          "title": "charts",
          "type": "array",
          "description": "Helm charts can also be included in Kustomization files, if preferred",
          "items": {
            "$ref": "#/$defs/HelmChart"
          }
        },
        "resources": {
          "title": "resources",
          "type": "array",
          "description": "List of files to be included by Kustomize when generating manifests.\n\nMust be relative paths, should be at or below application directory.",
          "examples": ["./namespace.yaml"],
          "items": {
            "type": "string"
          }
        },
        "extras": {
          "title": "extras",
          "type": "object",
          "description": "Any valid object definitions that can go into a Kustomization file.\n\nExtra fields can also be handled directly in the generated kustomization.yaml file below the ## ANSIBLE MANAGED block"
        }
      },
      "additionalProperties": false
    },
    "LocalStorage": {
      "$id": "/LocalStorage",
      "title": "localStorage",
      "description": "Definitions for creating PV/PVCs from rancher's local-path-provisioner.\n\nDefaults to a PV/PVC in the default storage directory defined by ansible variable {local_storage_root_dir}/{app.namespace}/{app.name}/{app.name}",
      "oneOf": [
        {
          "type": "null"
        },
        {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "title": "name",
                "type": "string",
                "description": "Name of the storage object"
              },
              "path": {
                "title": "path",
                "type": "string",
                "description": "Path of the directory to use. Relative paths are placed under ansible variable `local_storage_root_dir`"
              },
              "modes": {
                "title": "accessMode",
                "type": "array",
                "items": {
                  "enum": ["ReadWriteOnce", "ReadWriteMany"]
                }
              },
              "additionalProperties": false
            }
          }
        }
      ]
    },
    "IgnoreDifferences": {
      "$id": "/IgnoreDifferences",
      "title": "ignoreDifferences",
      "type": "object",
      "properties": {
        "group": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "jsonPointers": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            { "type": "string" }
          ]
        },
        "jqPathExpressions": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            { "type": "string" }
          ]
        },
        "managedFieldsManagers": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            { "type": "string" }
          ]
        }
      }
    }
  }
}
