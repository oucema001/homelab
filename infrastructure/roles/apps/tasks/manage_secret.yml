---
- name: Get data from sops file {{ sops_file }}
  when:
    - sops_file is file
    - sops_data
  vars:
    sops_data: "{{ (lookup('community.sops.sops', sops_file)| from_yaml )['data'] }}"
  set_fact:
    secrets: >-
      {{ secrets | combine( { secret.name: dict(sops_data.keys() | zip(sops_data.values() | map('b64decode')))  }) }}

- name: Generate secrets if needed
  when:
    - sops_file is not file
    - secret.value
  block:
    - name: Set empty generated_credentials object
      set_fact:
        generated_credentials: {}

    - name: enerate random password
      set_fact:
        generated_credentials: "{{ generated_credentials | combine( { item.0: lookup('password','/dev/null', length=30) } ) }}"
      loop: "{{ secret.value.data | items | selectattr(1, 'mapping') | selectattr('1.type', 'equalto', 'password') }}"

    - name: Generate API token/keys
      set_fact:
        generated_credentials: "{{ generated_credentials | combine( { item.0: lookup('password','/dev/null', length=60) } ) }}"
      loop: "{{ secret.value.data | items | selectattr(1, 'mapping') | selectattr('1.type', 'equalto', 'key') }}"

    - name: Merge in text fields
      set_fact:
        generated_credentials: "{{ generated_credentials | combine ( { item.0: item.1 } ) }}"
      loop: "{{ secret.value.data | items | rejectattr(1, 'mapping') }}"

    - name: Merge into global secrets obj
      set_fact:
        secrets: "{{ secrets | combine({ secret.name: generated_credentials }) }}"

    - name: Write out SOPS file
      community.sops.sops_encrypt:
        path: "{{ sops_file }}"
        encrypted_regex: "^(data|stringData)$"
        content_yaml: "{{ lookup('template', 'secret.yaml.j2', convert_data=false) | from_yaml}}"

  always:
    - name: Null generated_credentials value
      set_fact:
        generated_credentials:
