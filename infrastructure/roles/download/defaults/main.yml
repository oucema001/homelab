---
# If this is true, debug information will be displayed but
# may contain some private data, so it is recommended to set it to false
# in the production environment.
unsafe_show_logs: true

# do not delete remote cache files after using them
# NOTE: Setting this parameter to TRUE is only really useful when developing kubespray
download_keep_remote_cache: false

# Only useful when download_run_once is false: Localy cached files and images are
# uploaded to kubernetes nodes. Also, images downloaded on those nodes are copied
# back to the ansible runner's cache, if they are not yet preset.
download_force_cache: false

# Used to only evaluate vars from download role
skip_downloads: false

# Optionally skip kubeadm images download
skip_kubeadm_images: false
kubeadm_images: {}

# if this is set to true will only download files once. Doesn't work
# on Flatcar Container Linux by Kinvolk unless the download_localhost is true and localhost
# is running another OS type. Default compress level is 1 (fastest).
download_run_once: false
download_compress: 1

# if this is set to true will download container
download_container: true

# if this is set to true, uses the localhost for download_run_once mode
# (requires docker and sudo to access docker). You may want this option for
# local caching of docker images or for Flatcar Container Linux by Kinvolk cluster nodes.
# Otherwise, uses the first node in the kube_control_plane group to store images
# in the download_run_once mode.
download_localhost: false

# Always pull images if set to True. Otherwise check by the repo's tag/digest.
download_always_pull: false

# Some problems may occur when downloading files over https proxy due to ansible bug
# https://github.com/ansible/ansible/issues/32750. Set this variable to False to disable
download_validate_certs: true

# Use the first kube_control_plane if download_localhost is not set
download_delegate: "{{ groups['kube_control_plane'][0] }}"

# Allow control the times of download retries for files and containers
download_retries: 4

# Download URLs
kubelet_download_url: https://storage.googleapis.com/kubernetes-release/release/{{ kube_version }}/bin/linux/{{ image_arch }}/kubelet
kubectl_download_url: https://storage.googleapis.com/kubernetes-release/release/{{ kube_version }}/bin/linux/{{ image_arch }}/kubectl
kubeadm_download_url: https://storage.googleapis.com/kubernetes-release/release/{{ kubeadm_version }}/bin/linux/{{ image_arch }}/kubeadm
etcd_download_url: https://github.com/etcd-io/etcd/releases/download/{{ etcd_version }}/etcd-{{ etcd_version }}-linux-{{ image_arch }}.tar.gz
cni_download_url: https://github.com/containernetworking/plugins/releases/download/{{ cni_version }}/cni-plugins-linux-{{ image_arch }}-{{ cni_version }}.tgz
crictl_download_url: https://github.com/kubernetes-sigs/cri-tools/releases/download/{{ crictl_version }}/crictl-{{ crictl_version }}-{{ ansible_system | lower }}-{{ image_arch }}.tar.gz
crio_download_url: https://storage.googleapis.com/cri-o/artifacts/cri-o.{{ image_arch }}.{{ crio_version }}.tar.gz
helm_download_url: https://get.helm.sh/helm-{{ helm_version }}-linux-{{ image_arch }}.tar.gz
krew_download_url: https://github.com/kubernetes-sigs/krew/releases/download/{{ krew_version }}/krew-{{ host_os }}_{{ image_arch }}.tar.gz
skopeo_download_url: https://github.com/lework/skopeo-binary/releases/download/{{ skopeo_version }}/skopeo-linux-{{ image_arch }}
argocd_download_url: https://github.com/argoproj/argo-cd/releases/download/{{ argocd_version }}/argocd-linux-{{ image_arch }}
yq_download_url: https://github.com/mikefarah/yq/releases/download/{{ yq_version }}/yq_linux_{{ image_arch }}
runc_download_url: "https://github.com/opencontainers/runc/releases/download/{{ runc_version }}/runc.{{ image_arch }}"
kustomize_download_url: "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2F{{ kustomize_version}}/kustomize_{{ kustomize_version }}_linux_{{ image_arch }}.tar.gz"
ciliumcli_download_url: "https://github.com/cilium/cilium-cli/releases/download/{{ cilium_cli_version }}/cilium-linux-{{ image_arch }}.tar.gz"
hubblecli_download_url: "https://github.com/cilium/hubble/releases/download/{{ cilium_hubble_version }}/hubble-linux-{{ image_arch }}.tar.gz"

# Containers
# In some cases, we need a way to set --registry-mirror or --insecure-registry for docker,
# it helps a lot for local private development or bare metal environment.
# So you need define --registry-mirror or --insecure-registry, and modify the following url address.
# example:
# You need to deploy kubernetes cluster on local private development.
# Also provide the address of your own private registry.
# And use --insecure-registry options for docker
kube_proxy_image_repo: "{{ kube_image_repo }}/kube-proxy"

pod_infra_image_repo: "{{ kube_image_repo }}/pause"
pod_infra_image_tag: "{{ pod_infra_version }}"

registry_image_repo: "{{ docker_image_repo }}/library/registry"
registry_image_tag: "{{ registry_version }}"

csi_attacher_image_repo: "{{ kube_image_repo }}/sig-storage/csi-attacher"
csi_attacher_image_tag: v3.3.0
csi_provisioner_image_repo: "{{ kube_image_repo }}/sig-storage/csi-provisioner"
csi_provisioner_image_tag: v3.0.0
csi_snapshotter_image_repo: "{{ kube_image_repo }}/sig-storage/csi-snapshotter"
csi_snapshotter_image_tag: v5.0.0
csi_resizer_image_repo: "{{ kube_image_repo }}/sig-storage/csi-resizer"
csi_resizer_image_tag: v1.3.0
csi_node_driver_registrar_image_repo: "{{ kube_image_repo }}/sig-storage/csi-node-driver-registrar"
csi_node_driver_registrar_image_tag: v2.4.0
csi_livenessprobe_image_repo: "{{ kube_image_repo }}/sig-storage/livenessprobe"
csi_livenessprobe_image_tag: v2.5.0

snapshot_controller_supported_versions: v4.2.1
snapshot_controller_image_repo: "{{ kube_image_repo }}/sig-storage/snapshot-controller"
snapshot_controller_image_tag: "{{ snapshot_controller_supported_versions }}"

dashboard_image_repo: "{{ docker_image_repo }}/kubernetesui/dashboard"
dashboard_metrics_scraper_repo: "{{ docker_image_repo }}/kubernetesui/metrics-scraper"

downloads:
  etcd:
    container: "{{ etcd_deployment_type != 'host' }}"
    file: "{{ etcd_deployment_type == 'host' }}"
    enabled: true
    version: "{{ etcd_version }}"
    dest: "{{ download_cache_dir }}/etcd-{{ etcd_version }}-linux-{{ image_arch }}.tar.gz"
    repo: "{{ etcd_image_repo }}"
    tag: "{{ etcd_image_tag }}"
    url: "{{ etcd_download_url }}"
    unarchive: "{{ etcd_deployment_type == 'host' }}"
    mode: "0755"
    groups:
      - etcd

  cni:
    enabled: true
    file: true
    version: "{{ cni_version }}"
    dest: "{{ download_cache_dir }}/cni-plugins-linux-{{ image_arch }}-{{ cni_version }}.tar.gz"
    install: /opt/cni/bin/
    url: "{{ cni_download_url }}"
    unarchive: true
    owner: root
    mode: "0755"
    groups:
      - k8s_cluster

  kubeadm:
    enabled: true
    file: true
    version: "{{ kubeadm_version }}"
    dest: "{{ download_cache_dir }}/kubeadm-{{ kubeadm_version }}-{{ image_arch }}"
    install: "{{ bin_dir }}/kubeadm"
    url: "{{ kubeadm_download_url }}"
    unarchive: false
    mode: "0755"
    groups:
      - k8s_cluster

  kubelet:
    enabled: true
    file: true
    version: "{{ kube_version }}"
    dest: "{{ download_cache_dir }}/kubelet-{{ kube_version }}-{{ image_arch }}"
    install: "{{ bin_dir }}/kubelet"
    url: "{{ kubelet_download_url }}"
    unarchive: false
    mode: "0755"
    groups:
      - k8s_cluster

  kubectl:
    enabled: true
    file: true
    version: "{{ kube_version }}"
    dest: "{{ download_cache_dir }}/kubectl-{{ kube_version }}-{{ image_arch }}"
    install: "{{ bin_dir }}/kubectl"
    url: "{{ kubectl_download_url }}"
    unarchive: false
    mode: "0755"
    groups:
      - kube_control_plane

  crictl:
    file: true
    enabled: true
    version: "{{ crictl_version }}"
    dest: "{{ download_cache_dir }}/crictl-{{ crictl_version }}-linux-{{ image_arch }}.tar.gz"
    install: "{{ bin_dir }}/crictl"
    url: "{{ crictl_download_url }}"
    unarchive: true
    mode: "0755"
    groups:
      - k8s_cluster

  crio:
    file: true
    enabled: "{{ container_manager == 'crio' }}"
    version: "{{ crio_version }}"
    dest: "{{ download_cache_dir }}/cri-o.{{ image_arch }}.{{ crio_version }}.tar.gz"
    url: "{{ crio_download_url }}"
    unarchive: true
    mode: "0755"
    groups:
      - k8s_cluster

  runc:
    file: true
    enabled: "{{ runc_enabled }}"
    version: "{{ runc_version }}"
    dest: "{{ download_cache_dir }}/runc-{{ runc_version }}.{{ image_arch }}"
    url: "{{ runc_download_url }}"
    install: "{{ bin_dir }}/runc"
    unarchive: false
    owner: "root"
    mode: "0755"
    groups:
      - k8s_cluster

  skopeo:
    file: true
    enabled: "{{ container_manager == 'crio' }}"
    version: "{{ skopeo_version }}"
    dest: "{{ download_cache_dir }}/skopeo"
    install: "{{ bin_dir }}/skopeo"
    url: "{{ skopeo_download_url }}"
    unarchive: false
    mode: "0755"
    groups:
      - kube_control_plane

  cilium:
    enabled: "{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}"
    container: true
    repo: "{{ cilium_image_repo }}"
    tag: "{{ cilium_image_tag }}"
    groups:
    - k8s_cluster

  cilium_operator:
    enabled: "{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}"
    container: true
    repo: "{{ cilium_operator_image_repo }}"
    tag: "{{ cilium_operator_image_tag }}"
    groups:
    - k8s_cluster

  cilium_hubble_relay:
    enabled: "{{ cilium_enable_hubble }}"
    container: true
    repo: "{{ cilium_hubble_relay_image_repo }}"
    tag: "{{ cilium_hubble_relay_image_tag }}"
    groups:
    - k8s_cluster

  cilium_hubble_certgen:
    enabled: "{{ cilium_enable_hubble }}"
    container: true
    repo: "{{ cilium_hubble_certgen_image_repo }}"
    tag: "{{ cilium_hubble_certgen_image_tag }}"
    groups:
    - k8s_cluster

  cilium_hubble_ui:
    enabled: "{{ cilium_enable_hubble }}"
    container: true
    repo: "{{ cilium_hubble_ui_image_repo }}"
    tag: "{{ cilium_hubble_ui_image_tag }}"
    groups:
    - k8s_cluster

  cilium_hubble_ui_backend:
    enabled: "{{ cilium_enable_hubble }}"
    container: true
    repo: "{{ cilium_hubble_ui_backend_image_repo }}"
    tag: "{{ cilium_hubble_ui_backend_image_tag }}"
    groups:
    - k8s_cluster

  cilium_hubble_envoy:
    enabled: "{{ cilium_enable_hubble }}"
    container: true
    repo: "{{ cilium_hubble_envoy_image_repo }}"
    tag: "{{ cilium_hubble_envoy_image_tag }}"
    groups:
    - k8s_cluster

  ciliumcli:
    enabled: "{{ kube_network_plugin == 'cilium' or cilium_deploy_additionally | default(false) | bool }}"
    file: true
    version: "{{ cilium_cli_version }}"
    dest: "{{ download_cache_dir }}/cilium-{{ cilium_cli_version }}-{{ image_arch }}.tar.gz"
    url: "{{ ciliumcli_download_url }}"
    unarchive: true
    owner: "root"
    mode: "0755"
    groups:
    - k8s_cluster

  hubblecli:
    enabled: "{{ cilium_enable_hubble }}"
    file: true
    version: "{{ cilium_hubble_version }}"
    dest: "{{ download_cache_dir }}/hubble-{{ cilium_hubble_version }}-{{ image_arch }}.tar.gz"
    url: "{{ hubblecli_download_url }}"
    unarchive: true
    owner: "root"
    mode: "0755"
    groups:
    - k8s_cluster

  flannel:
    enabled: "{{ kube_network_plugin == 'flannel' or kube_network_plugin == 'canal' }}"
    container: true
    repo: "{{ flannel_image_repo }}"
    tag: "{{ flannel_image_tag }}"
    groups:
      - k8s_cluster

  flannel_init:
    enabled: "{{ kube_network_plugin == 'flannel' or kube_network_plugin == 'canal' }}"
    container: true
    repo: "{{ flannel_init_image_repo }}"
    tag: "{{ flannel_init_image_tag }}"
    groups:
      - k8s_cluster

  pod_infra:
    enabled: true
    container: true
    repo: "{{ pod_infra_image_repo }}"
    tag: "{{ pod_infra_image_tag }}"
    groups:
      - k8s_cluster

  coredns:
    enabled: "{{ dns_mode in ['coredns', 'coredns_dual'] }}"
    container: true
    repo: "{{ coredns_image_repo }}"
    tag: "{{ coredns_image_tag }}"
    groups:
      - k8s_cluster

  helm:
    enabled: "{{ helm_enabled }}"
    file: true
    version: "{{ helm_version }}"
    dest: "{{ download_cache_dir }}/helm-{{ helm_version }}-linux-{{ image_arch }}.tar.gz"
    install: "{{ bin_dir }}/helm"
    url: "{{ helm_download_url }}"
    unarchive: true
    unarchive_extra_opts:
      - "--strip=1"
    include:
      - "linux-{{ image_arch }}/helm"
    mode: "0755"
    groups:
      - kube_control_plane

  krew:
    enabled: "{{ krew_enabled }}"
    file: true
    version: "{{ krew_version }}"
    dest: "{{ download_cache_dir }}/krew-{{ host_os }}_{{ image_arch }}.tar.gz"
    url: "{{ krew_download_url }}"
    install: "{{ bin_dir }}/krew"
    unarchive: true
    mode: "0755"
    groups:
      - kube_control_plane

  registry:
    enabled: "{{ registry_enabled }}"
    container: true
    repo: "{{ registry_image_repo }}"
    tag: "{{ registry_image_tag }}"
    groups:
      - kube_node

  dashboard:
    enabled: "{{ dashboard_enabled }}"
    container: true
    repo: "{{ dashboard_image_repo }}"
    tag: "{{ dashboard_image_tag }}"
    groups:
      - kube_control_plane

  dashboard_metrics_scrapper:
    enabled: "{{ dashboard_enabled }}"
    container: true
    repo: "{{ dashboard_metrics_scraper_repo }}"
    tag: "{{ dashboard_metrics_scraper_tag }}"
    groups:
      - kube_control_plane

  argocd:
    enabled: "{{ argocd_enabled }}"
    file: true
    version: "{{ argocd_version }}"
    dest: "{{ download_cache_dir }}/argocd-linux-{{ image_arch }}"
    install: "{{ bin_dir }}/argocd"
    url: "{{ argocd_download_url }}"
    unarchive: false
    mode: "0755"
    groups:
      - kube_control_plane

  yq:
    enabled: "{{ argocd_enabled }}"
    file: true
    version: "{{ yq_version }}"
    dest: "{{ download_cache_dir }}/yq"
    install: "{{ bin_dir }}/yq"
    url: "{{ yq_download_url }}"
    unarchive: false
    mode: "0755"
    groups:
      - kube_control_plane

  kustomize:
    enabled: "{{ kustomize_enabled }}"
    file: true
    version: "{{ kustomize_version }}"
    dest: "{{ download_cache_dir }}/kustomize"
    install: "{{ bin_dir }}/kustomize"
    url: "{{ kustomize_download_url }}"
    unarchive: true
    mode: "0755"
    groups:
      - kubectl

download_defaults:
  container: false
  file: false
  repo: None
  tag: None
  enabled: false
  dest: None
  version: None
  url: None
  unarchive: false
  owner: "{{ kube_owner }}"
  group: "{{ kube_group }}"
  mode: None
